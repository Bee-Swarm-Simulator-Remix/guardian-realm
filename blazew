#!/usr/bin/env bash

VERSION="1.0.0-alpha.1"

argv_0=$0
projectdir=$(dirname $0)

startup() {
    echo -e "\033[1;34mBlazeBuild Wrapper version $VERSION\033[0m\n"
}

print() {
    echo -en "\033[${1}m$2\033[0m"
    echo -e "   $3"
}

help() {
    startup
    echo "Usage: $argv_0 [options] [tasks...]"
    echo ""
    echo "Options:"
    echo "  --setup   Setup BlazeBuild"
    echo "  --help    Show this help message"
    echo "  --version Show the version of BlazeBuild"
    echo ""
    echo "Tasks:"
    echo "  Any arguments or task names that should"
    echo "  be passed to BlazeBuild."
    echo "  Run \`$argv_0 tasks' to see a list of"
    echo "  available tasks."
    exit 0
}

getprop() {
   value=$(cat "$projectdir/blaze/blaze_wrapper.properties" | grep "$1" | cut -d'=' -f2)
   echo $value
}

source_bashrc() {
    if [ -f "$HOME/.bashrc" ]; then
        source "$HOME/.bashrc"
    elif [ -f "$HOME/.bash_profile" ]; then
        source "$HOME/.bash_profile"
    fi
}

setup_nvm() {
    has_curl=$(command -v curl)
    has_wget=$(command -v wget)

    print 34 "info   " "Installing NVM..."

    if [ ! -z "$has_curl" ]; then
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    elif [ ! -z "$has_wget" ]; then
        wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    else
        print "1;31" "error  " "No curl or wget found."
        exit 1
    fi

    source_bashrc
}

setup_runtime() {
    setup_nvm

    has_curl=$(command -v curl)
    has_wget=$(command -v wget)

    version=$(getprop "node.version")

    print 34 "info   " "Installing up Node.js ($version)..."
    echo install "$version"

    print 34 "info   " "Installing up Bun..."
    if [ ! -z "$has_curl" ]; then
        curl -fsSL https://bun.sh/install | bash
    elif [ ! -z "$has_wget" ]; then
        wget -qO- https://bun.sh/install | bash
    else
        print "1;31" "error  " "No curl or wget found."
        exit 1
    fi

    source_bashrc
}

setup=0
argsetup=0

for arg in "$@"; do
    if [ "$arg" == "--setup" ]; then
        setup=1
        argsetup=1
    elif [ "$arg" == "--help" ]; then
        help
    elif [ "$arg" == "--version" ]; then
        startup
        exit 0
    fi
done

if [ ! -d "$projectdir/build_src/node_modules" ] || [ ! -d "$projectdir/node_modules/blazebuild" ] || [ -z "$(command -v node)" ] || [ -z "$(command -v bun)" ]; then
    setup=1
fi

has_bun=$(command -v bun)
cmd="npm"
file="$projectdir/node_modules/blazebuild/build/index.js"

if [ ! -z "$has_bun" ]; then
    cmd="bun"
    file="$projectdir/node_modules/blazebuild/src/index.ts"
fi

blaze_cmd() {
    if [ -z "$has_bun" ]; then
        node $file $@
    else
        bun $file $@
    fi
}

if [ ! -e "$projectdir/.blaze/build.d.ts" ]; then
    print 34 "info   " "Creating $projectdir/.blaze/build.d.ts..."
    mkdir -p "$projectdir/.blaze"
    cp "$projectdir/build_src/templates/build.d.ts" "$projectdir/.blaze/build.d.ts"

    if [ $? -ne 0 ]; then
        print "1;31" "error  " "Failed to create build.d.ts."
        exit 1
    fi
fi

if [ $setup -eq 1 ]; then
    startup
    print 34 "info   " "Project directory: $projectdir"
    print 34 "info   " "Setting up BlazeBuild..."
    rm -rf "$projectdir/build_src/node_modules"
    pushd "$projectdir/build_src" > /dev/null 2>&1 || exit 1

    print 34 "info   " "Installing dependencies for BlazeBuild..."
    print 36 "command" "$cmd install"
    command $cmd install
    popd > /dev/null 2>&1  || exit 1

    print 34 "info   " "Finishing up..."
    mkdir -p "$projectdir/node_modules"

    if [ -L "$projectdir/node_modules/blazebuild" ] || [ -d "$projectdir/node_modules/blazebuild" ]; then
        rm "$projectdir/node_modules/blazebuild" || exit 1
    fi

    ln -s "$(readlink -f "$projectdir/build_src")" "$projectdir/node_modules/blazebuild" || exit 1

    if [ -z "$has_bun" ]; then
        print 34 "info   " "Building BlazeBuild (for node)..."
        pushd "$projectdir/build_src" > /dev/null 2>&1 || exit 1
        npx tsc
        popd > /dev/null 2>&1 || exit 1
    fi

    if [ -z "$(command -v node)" ] || [ -z "$(command -v bun)" ]; then
        setup_runtime
    fi

    print "1;32" "success" "Setup completed."
fi

if [ $argsetup -eq 1 ]; then
    exit 0
fi

blaze_cmd $@